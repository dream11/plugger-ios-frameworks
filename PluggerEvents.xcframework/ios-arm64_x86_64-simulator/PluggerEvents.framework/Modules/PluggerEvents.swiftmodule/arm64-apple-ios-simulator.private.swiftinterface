// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PluggerEvents
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import PluggerCore
@_exported import PluggerEvents
import Swift
import _Concurrency
import _StringProcessing
@objc final public class ClientConfigEventAction : ObjectiveC.NSObject {
  final public let eventName: Swift.String
  final public let reversedAction: [Swift.String]
  required public init(eventName: Swift.String, reversedAction: [Swift.String] = [])
  @objc deinit
}
@objc final public class ClientConfigEventReversedActionInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let reversedAction: [Swift.String]
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc final public class ClientConfigEventDestinationInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let defaultAction: [Swift.String : Swift.Int]?
  final public let event: [Swift.String : PluggerEvents.ClientConfigEventReversedActionInfo]?
  final public func shouldSendEventToDestination(withDefaultActionName defaultActionName: Swift.String) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class ClientConfigData : ObjectiveC.NSObject, Swift.Codable {
  final public let eventDestination: PluggerEvents.ClientConfigEventDestinationInfo?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class ClientConfigResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let data: PluggerEvents.ClientConfigData?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc final public class Event : ObjectiveC.NSObject, Swift.Codable {
  public init(name: Swift.String, props: [Swift.String : PluggerEvents.EventProp], isPriority: Swift.Bool, destinations: [PluggerEvents.EventDestination] = [])
  convenience public init(name: Swift.String, props: [Swift.String : Any], isPriority: Swift.Bool, destinations: [Swift.String])
  final public func updateProps(with newProps: [Swift.String : Any])
  final public func getAllProps() -> [Swift.String : PluggerEvents.EventProp]
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc final public class EventsBatchRequestPayload : ObjectiveC.NSObject, Swift.Encodable {
  public init(batch: [PluggerEvents.Event])
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@objc public class EventSnapshot : ObjectiveC.NSObject, Swift.Codable {
  final public let timestamp: Swift.Double
  final public let data: [Swift.String : PluggerEvents.Event]
  public init(timestamp: Swift.Double, data: [Swift.String : PluggerEvents.Event])
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class SendableEvent : ObjectiveC.NSObject, Swift.Codable {
  public init(event: PluggerEvents.Event)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum EventDestination : Swift.Int, Swift.Codable {
  case DATA_HIGHWAY
  case CLEVERTAP
  case APXOR
  case APPSFLYER
  case APPTIMIZE
  case CRASHLYTICS
  case FIREBASE_CRASHLYTICS
  case DATADOG
  case SEGMENT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func getDestinationName(from destination: PluggerEvents.EventDestination) -> Swift.String
public func getEventDestination(from destinationName: Swift.String) -> PluggerEvents.EventDestination?
public func getEventDestination(fromDefaultActionName defaultActionName: Swift.String) -> PluggerEvents.EventDestination?
public func getDefaultActionName(from eventDestination: PluggerEvents.EventDestination) -> Swift.String
@objc final public class EventProp : ObjectiveC.NSObject {
  final public let boolValue: Swift.Bool?
  final public let intValue: Swift.Int?
  final public let longValue: Swift.Int64?
  final public let doubleValue: Swift.Double?
  final public let stringValue: Swift.String?
  final public let dictionaryValue: [Swift.String : PluggerEvents.EventProp]?
  required public init(boolValue: Swift.Bool? = nil, intValue: Swift.Int? = nil, longValue: Swift.Int64? = nil, doubleValue: Swift.Double? = nil, stringValue: Swift.String? = nil, dictionaryValue: [Swift.String : PluggerEvents.EventProp]? = nil)
  convenience public init(boolValue: Swift.Bool)
  convenience public init(intValue: Swift.Int)
  convenience public init(longValue: Swift.Int64)
  convenience public init(doubleValue: Swift.Double)
  convenience public init(stringValue: Swift.String)
  convenience public init(dictionaryValue: [Swift.String : PluggerEvents.EventProp])
  @objc deinit
}
extension PluggerEvents.EventProp : Swift.Encodable {
  final public func encode(to encoder: Swift.Encoder) throws
}
extension PluggerEvents.EventProp : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
extension PluggerEvents.EventProp {
  @objc override final public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc final public class GlobalPropsManager : ObjectiveC.NSObject {
  final public func getAllProps() -> [Swift.String : Any]
  final public func updateProps(_ props: [Swift.String : Any])
  @objc deinit
}
@objc public protocol EventsSendable {
  @objc func fireEvent(_ event: PluggerEvents.Event)
  @objc func fireEventToDestinations(_ event: PluggerEvents.Event, completion: @escaping ([Swift.String : PluggerEvents.Event]?, Swift.String?) -> Swift.Void)
  @objc func fireEvents(_ events: [PluggerEvents.Event])
}
@objc public protocol GlobalPropsNotifier {
  @objc func updateGlobalProps(_ props: [Swift.String : Any])
}
public protocol EventsDebuggable {
  func getAllEventQueues() -> ([PluggerEvents.Event], [PluggerEvents.Event], [PluggerEvents.Event])
}
@_inheritsConvenienceInitializers @objc final public class PlugEvents : ObjectiveC.NSObject, PluggerCore.Initializable, PluggerEvents.EventsSendable, PluggerEvents.GlobalPropsNotifier {
  @objc required override dynamic public init()
  public static let EVENTS_PROXY_URL: Swift.String
  public static let EVENTS_BASE_URL: Swift.String
  public static let DEFAULT_BATCH_SIZE: Swift.Int
  public static let DEFAULT_BATCH_INTERVAL_IN_MS: Swift.Int
  public static let DEFAULT_PERSIST_INTERVAL_IN_MS: Swift.Int
  @objc final public func fireEvent(_ event: PluggerEvents.Event)
  @objc final public func fireEventToDestinations(_ event: PluggerEvents.Event, completion: @escaping ([Swift.String : PluggerEvents.Event]?, Swift.String?) -> Swift.Void)
  @objc final public func fireEvents(_ events: [PluggerEvents.Event])
  @objc final public func updateGlobalProps(_ props: [Swift.String : Any])
  @objc deinit
}
@objc extension PluggerEvents.PlugEvents : PluggerCore.Configurable {
  @objc final public func configure(config: PluggerCore.Config)
}
@objc extension PluggerEvents.PlugEvents : PluggerCore.Notifiable {
  @objc final public func onNotify(eventType: PluggerCore.PluggerNotifiableEvents, data: [Swift.AnyHashable : Any]?)
}
extension PluggerEvents.PlugEvents : PluggerEvents.EventsDebuggable {
  final public func getAllEventQueues() -> ([PluggerEvents.Event], [PluggerEvents.Event], [PluggerEvents.Event])
}
@objc public class BatchingConfig : ObjectiveC.NSObject {
  public var batchSize: Swift.Int
  public var batchInterval: Swift.Int
  public init(batchSize: Swift.Int, batchInterval: Swift.Int)
  @objc deinit
}
@objc public class PersistEventsConfig : ObjectiveC.NSObject {
  public var persistenceInterval: Swift.Int
  public init(persistenceInterval: Swift.Int)
  @objc deinit
}
@objc public class GlobalPropsConfig : ObjectiveC.NSObject {
  public var shouldWaitForGlobalProps: Swift.Bool
  public var commonProps: [Swift.String : Any]?
  public var transformMap: [Swift.String : Swift.String]?
  public var appendPropsBeforeDispatch: (() -> [Swift.String : Any]?)?
  public init(shouldWaitForGlobalProps: Swift.Bool = true, commonProps: [Swift.String : Any]? = nil, transformMap: [Swift.String : Swift.String]? = nil, appendPropsBeforeDispatch: (() -> [Swift.String : Any]?)? = nil)
  @objc deinit
}
@objc public class BlacklistingConfig : ObjectiveC.NSObject {
  final public let url: Swift.String
  final public let apiEndpoint: Swift.String
  final public let params: [Swift.String : Swift.String]
  final public let headers: [Swift.String : Swift.String]?
  public init(url: Swift.String, apiEndpoint: Swift.String, params: [Swift.String : Swift.String], headers: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
@objc public class EventsConfig : ObjectiveC.NSObject, PluggerCore.Config {
  @objc public var httpConfig: PluggerCore.HTTPConfig
  public var enableBatching: Swift.Bool
  public var batchingConfig: PluggerEvents.BatchingConfig?
  public var enableEventsPersistence: Swift.Bool
  public var persistEventsConfig: PluggerEvents.PersistEventsConfig?
  public var shouldAddGlobalProps: Swift.Bool
  public var globalPropsConfig: PluggerEvents.GlobalPropsConfig?
  public var enableBlacklisting: Swift.Bool
  public var blacklistingConfig: PluggerEvents.BlacklistingConfig?
  public init(httpConfig: PluggerCore.HTTPConfig, enableBatching: Swift.Bool = true, batchingConfig: PluggerEvents.BatchingConfig? = nil, enableEventsPersistence: Swift.Bool = true, persistEventsConfig: PluggerEvents.PersistEventsConfig? = nil, shouldAddGlobalProps: Swift.Bool = true, globalPropsConfig: PluggerEvents.GlobalPropsConfig? = nil, enableBlacklisting: Swift.Bool = false, blacklistingConfig: PluggerEvents.BlacklistingConfig? = nil)
  public static let defaultActionsMap: [Swift.String : Swift.Int]
  public static let dhDefaultActionsMap: [Swift.String : Swift.Int]
  @objc deinit
}
@objc public enum EventHeader : Swift.Int {
  case ApiKey
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func getEventstHeaderName(from header: PluggerEvents.EventHeader) -> Swift.String
extension PluggerEvents.EventDestination : Swift.Equatable {}
extension PluggerEvents.EventDestination : Swift.Hashable {}
extension PluggerEvents.EventDestination : Swift.RawRepresentable {}
extension PluggerEvents.EventHeader : Swift.Equatable {}
extension PluggerEvents.EventHeader : Swift.Hashable {}
extension PluggerEvents.EventHeader : Swift.RawRepresentable {}
