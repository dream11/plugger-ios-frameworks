// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PluggerFeatureFlags
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import PluggerCore
@_exported import PluggerFeatureFlags
import Swift
import _Concurrency
import _StringProcessing
@propertyWrapper public struct AtomicProperty<Value> {
  public init(wrappedValue: Value)
  public var wrappedValue: Value {
    get
    set
  }
}
@objc final public class FeatureFlagSnapshot : ObjectiveC.NSObject, Swift.Codable {
  final public let timestamp: Swift.Double
  final public let data: [Swift.String : PluggerFeatureFlags.FeatureFlag]
  public init(timestamp: Swift.Double, data: [Swift.String : PluggerFeatureFlags.FeatureFlag])
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc final public class FeatureFlagResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let data: [PluggerFeatureFlags.FeatureFlag]?
  final public let error: PluggerFeatureFlags.FeatureFlagResponseError?
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class FeatureFlagResponseError : ObjectiveC.NSObject, Swift.Codable {
  final public let message: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc final public class FeatureFlag : ObjectiveC.NSObject, Swift.Codable {
  public static let ASSIGNED_STATUS: Swift.String
  final public let name: Swift.String
  final public let variables: [Swift.String : PluggerFeatureFlags.FeatureFlagVariable]
  public init(name: Swift.String, id: Swift.Int, variables: [Swift.String : PluggerFeatureFlags.FeatureFlagVariable])
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class FeatureFlagsConfig : ObjectiveC.NSObject, PluggerCore.Config {
  @objc public var httpConfig: PluggerCore.HTTPConfig
  public var shouldFetchOnInit: Swift.Bool
  public var shouldFetchOnForeground: Swift.Bool
  public var fetchInterval: Swift.Double
  public var defaultValues: [Swift.String : Any]
  public init(httpConfig: PluggerCore.HTTPConfig, shouldFetchOnInit: Swift.Bool, shouldFetchOnForeground: Swift.Bool, fetchInterval: Foundation.TimeInterval, defaultValues: [Swift.String : Any])
  @objc deinit
}
@objc public protocol FeatureFlagsDelegate {
  @objc func onSuccess()
  @objc func onFailure(error: Swift.String)
}
@objc public protocol FeatureFlagsDataSource {
  @objc func isEnabled(for flagName: Swift.String) -> Swift.Bool
  @objc func getValue(for flagName: Swift.String) -> Swift.Bool
  @objc func getBooleanValue(for key: Swift.String) -> Swift.Bool
  @objc func getStringValue(for key: Swift.String) -> Swift.String
  @objc func getIntValue(for key: Swift.String) -> Swift.Int
  @objc func getLongValue(for key: Swift.String) -> Swift.Int64
  @objc func getDoubleValue(for key: Swift.String) -> Swift.Double
  @objc func getArrayValue(for key: Swift.String) -> [Any]
  @objc func getDictionaryValue(for key: Swift.String) -> [Swift.String : Any]
  @objc func getJsonObjectValue(for key: Swift.String) -> Any?
  @objc func getBooleanValue(for name: Swift.String, variable: Swift.String) -> Swift.Bool
  @objc func getStringValue(for name: Swift.String, variable: Swift.String) -> Swift.String
  @objc func getIntValue(for name: Swift.String, variable: Swift.String) -> Swift.Int
  @objc func getLongValue(for name: Swift.String, variable: Swift.String) -> Swift.Int64
  @objc func getDoubleValue(for name: Swift.String, variable: Swift.String) -> Swift.Double
  @objc func getArrayValue(for name: Swift.String, variable: Swift.String) -> [Any]
  @objc func getDictionaryValue(for name: Swift.String, variable: Swift.String) -> [Swift.String : Any]
  @objc func getJsonObjectValue(for name: Swift.String, variable: Swift.String) -> Any?
}
@objc final public class FeatureFlagVariable : ObjectiveC.NSObject {
  final public let boolValue: Swift.Bool?
  final public let intValue: Swift.Int?
  final public let longValue: Swift.Int64?
  final public let doubleValue: Swift.Double?
  final public let stringValue: Swift.String?
  final public let listValue: [PluggerFeatureFlags.FeatureFlagVariable]?
  final public let dictionaryValue: [Swift.String : PluggerFeatureFlags.FeatureFlagVariable]?
  required public init(boolValue: Swift.Bool? = nil, intValue: Swift.Int? = nil, longValue: Swift.Int64? = nil, doubleValue: Swift.Double? = nil, stringValue: Swift.String? = nil, listValue: [PluggerFeatureFlags.FeatureFlagVariable]? = nil, dictionaryValue: [Swift.String : PluggerFeatureFlags.FeatureFlagVariable]? = nil)
  convenience public init(boolValue: Swift.Bool? = nil)
  convenience public init(intValue: Swift.Int? = nil)
  convenience public init(longValue: Swift.Int64? = nil)
  convenience public init(doubleValue: Swift.Double? = nil)
  convenience public init(stringValue: Swift.String? = nil)
  convenience public init(listValue: [PluggerFeatureFlags.FeatureFlagVariable]? = nil)
  convenience public init(dictionaryValue: [Swift.String : PluggerFeatureFlags.FeatureFlagVariable]? = nil)
  @objc deinit
}
extension PluggerFeatureFlags.FeatureFlagVariable : Swift.Encodable {
  final public func encode(to encoder: Swift.Encoder) throws
}
extension PluggerFeatureFlags.FeatureFlagVariable : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
extension PluggerFeatureFlags.FeatureFlagVariable {
  @objc override final public var description: Swift.String {
    @objc get
  }
}
public typealias FeatureFlagsFetchResponse = (PluggerFeatureFlags.FeatureFlagResponse?, Swift.String?) -> Swift.Void
@_inheritsConvenienceInitializers @objc final public class PlugFeatureFlags : ObjectiveC.NSObject, PluggerCore.Initializable {
  @objc required override dynamic public init()
  public static let shared: PluggerFeatureFlags.PlugFeatureFlags
  weak final public var delegate: PluggerFeatureFlags.FeatureFlagsDelegate?
  final public func fetchFeatureFlags(completion: @escaping PluggerFeatureFlags.FeatureFlagsFetchResponse)
  @objc deinit
}
@objc extension PluggerFeatureFlags.PlugFeatureFlags : PluggerCore.Configurable {
  @objc final public func configure(config: PluggerCore.Config)
}
@objc extension PluggerFeatureFlags.PlugFeatureFlags : PluggerFeatureFlags.FeatureFlagsDataSource {
  @objc final public func getBooleanValue(for key: Swift.String) -> Swift.Bool
  @objc final public func getStringValue(for key: Swift.String) -> Swift.String
  @objc final public func getIntValue(for key: Swift.String) -> Swift.Int
  @objc final public func getLongValue(for key: Swift.String) -> Swift.Int64
  @objc final public func getDoubleValue(for key: Swift.String) -> Swift.Double
  @objc final public func getArrayValue(for key: Swift.String) -> [Any]
  @objc final public func getDictionaryValue(for key: Swift.String) -> [Swift.String : Any]
  @objc final public func getJsonObjectValue(for key: Swift.String) -> Any?
  @objc final public func getBooleanValue(for name: Swift.String, variable: Swift.String) -> Swift.Bool
  @objc final public func getStringValue(for name: Swift.String, variable: Swift.String) -> Swift.String
  @objc final public func getIntValue(for name: Swift.String, variable: Swift.String) -> Swift.Int
  @objc final public func getLongValue(for name: Swift.String, variable: Swift.String) -> Swift.Int64
  @objc final public func getDoubleValue(for name: Swift.String, variable: Swift.String) -> Swift.Double
  @objc final public func getArrayValue(for name: Swift.String, variable: Swift.String) -> [Any]
  @objc final public func getDictionaryValue(for name: Swift.String, variable: Swift.String) -> [Swift.String : Any]
  @objc final public func getJsonObjectValue(for name: Swift.String, variable: Swift.String) -> Any?
  @objc final public func isEnabled(for flagName: Swift.String) -> Swift.Bool
  @objc final public func getValue(for flagName: Swift.String) -> Swift.Bool
}
@objc extension PluggerFeatureFlags.PlugFeatureFlags : PluggerCore.Notifiable {
  @objc final public func onNotify(eventType: PluggerCore.PluggerNotifiableEvents, data: [Swift.AnyHashable : Any]?)
}
final public class SynchronizedDictionary<Key, Value> where Key : Swift.Hashable {
  public typealias InternalCollectionType = [Key : Value]
  public typealias Index = PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType.Index
  public typealias Element = PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType.Element
  public typealias Keys = PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType.Keys
  public typealias Values = PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType.Values
  final public var keys: [Key] {
    get
  }
  final public var values: [Value] {
    get
  }
  public init(queueName: Swift.String? = nil)
  convenience public init(dictionary: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType, queueName: Swift.String? = nil)
  final public func set(value: Value, forKey key: Key)
  @discardableResult
  final public func remove(_ key: Key) -> Value?
  final public func contains(_ key: Key) -> Swift.Bool
  final public func value(forKey key: Key) -> Value?
  final public func internalDictionary() -> PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType
  final public func assignTo(dictionary: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType)
  final public func merge(dictionary: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.InternalCollectionType)
  final public subscript(key: Key) -> Value? {
    get
    set
  }
  @objc deinit
}
extension PluggerFeatureFlags.SynchronizedDictionary : Swift.Collection {
  final public subscript(position: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Index) -> PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Element {
    get
  }
  final public func index(after i: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Index) -> PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Index
  final public var startIndex: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Index {
    get
  }
  final public var endIndex: PluggerFeatureFlags.SynchronizedDictionary<Key, Value>.Index {
    get
  }
  public typealias Indices = Swift.DefaultIndices<PluggerFeatureFlags.SynchronizedDictionary<Key, Value>>
  public typealias Iterator = Swift.IndexingIterator<PluggerFeatureFlags.SynchronizedDictionary<Key, Value>>
  public typealias SubSequence = Swift.Slice<PluggerFeatureFlags.SynchronizedDictionary<Key, Value>>
}
